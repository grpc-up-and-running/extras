// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ecommerce

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OrderManagementClient is the client API for OrderManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderManagementClient interface {
	AddOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	GetOrder(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*Order, error)
}

type orderManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderManagementClient(cc grpc.ClientConnInterface) OrderManagementClient {
	return &orderManagementClient{cc}
}

var orderManagementAddOrderStreamDesc = &grpc.StreamDesc{
	StreamName: "addOrder",
}

func (c *orderManagementClient) AddOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/ecommerce.OrderManagement/addOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var orderManagementGetOrderStreamDesc = &grpc.StreamDesc{
	StreamName: "getOrder",
}

func (c *orderManagementClient) GetOrder(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/ecommerce.OrderManagement/getOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderManagementService is the service API for OrderManagement service.
// Fields should be assigned to their respective handler implementations only before
// RegisterOrderManagementService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type OrderManagementService struct {
	AddOrder func(context.Context, *Order) (*wrappers.StringValue, error)
	GetOrder func(context.Context, *wrappers.StringValue) (*Order, error)
}

func (s *OrderManagementService) addOrder(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/ecommerce.OrderManagement/AddOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AddOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *OrderManagementService) getOrder(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/ecommerce.OrderManagement/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetOrder(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterOrderManagementService registers a service implementation with a gRPC server.
func RegisterOrderManagementService(s grpc.ServiceRegistrar, srv *OrderManagementService) {
	srvCopy := *srv
	if srvCopy.AddOrder == nil {
		srvCopy.AddOrder = func(context.Context, *Order) (*wrappers.StringValue, error) {
			return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
		}
	}
	if srvCopy.GetOrder == nil {
		srvCopy.GetOrder = func(context.Context, *wrappers.StringValue) (*Order, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "ecommerce.OrderManagement",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "addOrder",
				Handler:    srvCopy.addOrder,
			},
			{
				MethodName: "getOrder",
				Handler:    srvCopy.getOrder,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "order_mgt.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewOrderManagementService creates a new OrderManagementService containing the
// implemented methods of the OrderManagement service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewOrderManagementService(s interface{}) *OrderManagementService {
	ns := &OrderManagementService{}
	if h, ok := s.(interface {
		AddOrder(context.Context, *Order) (*wrappers.StringValue, error)
	}); ok {
		ns.AddOrder = h.AddOrder
	}
	if h, ok := s.(interface {
		GetOrder(context.Context, *wrappers.StringValue) (*Order, error)
	}); ok {
		ns.GetOrder = h.GetOrder
	}
	return ns
}

// UnstableOrderManagementService is the service API for OrderManagement service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableOrderManagementService interface {
	AddOrder(context.Context, *Order) (*wrappers.StringValue, error)
	GetOrder(context.Context, *wrappers.StringValue) (*Order, error)
}
